import { Button } from "@/components/ui/button";
import { useAppContext } from '../context/AppContext';
import { useState, useEffect } from 'react';
import { Microscope, FileText, Mail } from 'lucide-react';

interface Trial {
  nct_id: string;
  title: string;
  summary: string;
  status: string;
  locations: string[];
  url: string;
  match_reason: string;
  match_score: 'high' | 'medium' | 'low';
  phase: string;
  citations?: any[];
}

export default function Recommendations() {
  const { analysisResult, patientData } = useAppContext();
  const { treatment_recommendations, result } = analysisResult;
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [highMatchTrials, setHighMatchTrials] = useState<Trial[]>([]);
  const [trialsLoading, setTrialsLoading] = useState(false);

  useEffect(() => {
    if (result && patientData.age && patientData.moca) {
      fetchHighMatchTrials();
    }
  }, [result, patientData]);

  const fetchHighMatchTrials = async () => {
    setTrialsLoading(true);
    try {
      const riskTier = result?.triage?.risk_tier || 'MODERATE';
      const imagingFindings = result?.note?.imaging_findings || {};
      
      const requestData = {
        risk_tier: riskTier,
        imaging_findings: imagingFindings,
        moca_score: patientData.moca || 24,
        age: patientData.age || 72,
        sex: patientData.sex || 'M'
      };
      
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://127.0.0.1:8000'}/api/trials`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });
      
      if (response.ok) {
        const data = await response.json();
        const trials = data.trials || [];
        const highMatch = trials.filter((trial: Trial) => trial.match_score === 'high');
        setHighMatchTrials(highMatch);
      } else {
        setHighMatchTrials(getDemoHighMatchTrials());
      }
    } catch (error) {
      console.error('Error fetching trials for recommendations:', error);
      setHighMatchTrials(getDemoHighMatchTrials());
    } finally {
      setTrialsLoading(false);
    }
  };

  const getDemoHighMatchTrials = (): Trial[] => [
    {
      nct_id: "NCT05123456",
      title: "Cognitive Training for Mild Cognitive Impairment",
      summary: "A randomized controlled trial investigating the effects of computerized cognitive training on memory and executive function in adults with mild cognitive impairment.",
      status: "Recruiting",
      locations: ["Stanford University", "UCSF Medical Center"],
      url: "https://clinicaltrials.gov/study/NCT05123456",
      match_reason: "Strong match: Patient risk tier and cognitive profile align well with trial criteria for cognitive intervention studies.",
      match_score: "high" as const,
      phase: "PHASE2"
    }
  ];

  const handleGenerateReport = () => {
    setIsGeneratingReport(true);
    setTimeout(() => {
      window.print();
      setIsGeneratingReport(false);
    }, 500);
  };

  const handleShareWithProvider = () => {
    const riskTier = result?.triage?.risk_tier || 'UNKNOWN';
    const currentDate = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    
    const emailSubject = `Neuro Triage Analysis Report - ${currentDate}`;
    
    const medicalRecommendations = treatment_recommendations?.medical_management?.map((item: any, index: number) => 
      `   ${index + 1}. ${item.intervention}${item.rationale ? ` (${item.rationale})` : ''}`
    ).join('\n') || '   No specific medical interventions recommended at this time.';
    
    const referrals = treatment_recommendations?.referrals?.map((ref: any, index: number) => 
      `   ${index + 1}. ${ref.specialist}${ref.timeframe ? ` - Timeline: ${ref.timeframe}` : ' - Standard timeline'}${ref.rationale ? `\n      Rationale: ${ref.rationale}` : ''}`
    ).join('\n') || '   No specialist referrals needed at this time.';
    
    const lifestyleInterventions = treatment_recommendations?.lifestyle_interventions?.map((item: any, index: number) => 
      `   ${index + 1}. ${item.intervention}${item.evidence_level ? ` (Evidence Level: ${item.evidence_level})` : ''}`
    ).join('\n') || '   No specific lifestyle interventions recommended.';
    
    const emailBody = `Dear Healthcare Provider,

I hope this message finds you well. Please find below the comprehensive neurological triage analysis and treatment recommendations generated by our AI-powered cognitive decline screening system.

PATIENT SUMMARY

Patient Demographics:
• Age: ${patientData.age || 'Not specified'}
• Sex: ${patientData.sex || 'Not specified'}
• MoCA Score: ${patientData.moca || 'Not assessed'}

Analysis Date: ${currentDate}

RISK ASSESSMENT

Risk Tier: ${riskTier}
Priority Score: ${treatment_recommendations?.priority_score ? Math.round(treatment_recommendations.priority_score * 100) + '%' : 'Not calculated'}

TREATMENT RECOMMENDATIONS

Medical Management:
${medicalRecommendations}

Specialist Referrals:
${referrals}

Lifestyle Interventions:
${lifestyleInterventions}

IMPORTANT NOTES

• This analysis was generated by the Neuro Triage AI system using advanced neuroimaging analysis and cognitive assessment algorithms.
• All recommendations should be reviewed and validated by qualified healthcare professionals before implementation.
• This report is intended to support clinical decision-making and should not replace professional medical judgment.
• For questions about this analysis or to discuss the patient's care plan, please don't hesitate to reach out.

Thank you for your attention to this patient's care.

Best regards,
Neuro Triage AI System
Generated on ${currentDate}`;

    const mailtoUrl = `mailto:?subject=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailBody)}`;
    window.location.href = mailtoUrl;
  };

  if (!result || !treatment_recommendations) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold text-gray-900">Treatment Recommendations</h1>
        </div>
        <div className="text-center py-12">
          <Microscope className="w-16 h-16 mx-auto mb-4 text-gray-400" />
          <h2 className="text-xl font-semibold text-gray-700 mb-2">No Analysis Available</h2>
          <p className="text-gray-500">Please run an analysis from the Dashboard first to see treatment recommendations.</p>
        </div>
      </div>
    );
  }

  const riskTier = result.triage?.risk_tier || 'UNKNOWN';

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">Treatment Recommendations</h1>
        <div className="flex space-x-2">
          <Button 
            variant="outline" 
            onClick={handleGenerateReport}
            disabled={isGeneratingReport}
          >
            <FileText className="w-4 h-4 mr-2" />
            {isGeneratingReport ? 'Generating...' : 'Generate Report'}
          </Button>
          <Button onClick={handleShareWithProvider}>
            <Mail className="w-4 h-4 mr-2" />
            Share with Provider
          </Button>
        </div>
      </div>

      {/* Immediate Actions Section */}
      <div className="bg-gradient-to-r from-red-50 to-orange-50 rounded-lg p-6 border border-red-200">
        <h2 className="text-lg font-semibold mb-4 text-red-800">Immediate Actions (Next 48-72 Hours)</h2>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Safety Assessment */}
          <div className="space-y-3">
            <h3 className="text-md font-medium text-red-700 mb-3">Safety Assessment</h3>
            <div className="space-y-2">
              <div className="flex items-start">
                <div className="w-2 h-2 bg-red-600 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                <span className="text-sm text-gray-700">Driving evaluation recommended</span>
              </div>
              <div className="flex items-start">
                <div className="w-2 h-2 bg-red-600 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                <span className="text-sm text-gray-700">Medication management review</span>
              </div>
            </div>
          </div>

          {/* STAT Laboratory Studies */}
          <div className="space-y-3">
            <h3 className="text-md font-medium text-red-700 mb-3">STAT Laboratory Studies</h3>
            <div className="space-y-2">
              <div className="flex items-start">
                <div className="w-2 h-2 bg-orange-600 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                <span className="text-sm text-gray-700">B12, TSH, vitamin D levels</span>
              </div>
              <div className="flex items-start">
                <div className="w-2 h-2 bg-orange-600 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                <span className="text-sm text-gray-700">Comprehensive metabolic panel</span>
              </div>
            </div>
          </div>

          {/* Urgent Referrals */}
          <div className="space-y-3">
            <h3 className="text-md font-medium text-red-700 mb-3">Urgent Referrals</h3>
            <div className="space-y-2">
              <div className="flex items-start">
                <div className="w-2 h-2 bg-red-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                <span className="text-sm text-gray-700">Neurology consultation within 2 weeks</span>
              </div>
              <div className="flex items-start">
                <div className="w-2 h-2 bg-red-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                <span className="text-sm text-gray-700">Consider neuropsychology if available</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Risk Summary */}
        <div className="border border-zinc-200 rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Risk Assessment</h2>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Current Risk Tier</span>
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                riskTier === 'LOW' ? 'bg-green-100 text-green-800' :
                riskTier === 'MODERATE' ? 'bg-yellow-100 text-yellow-800' :
                riskTier === 'HIGH' ? 'bg-orange-100 text-orange-800' :
                'bg-red-100 text-red-800'
              }`}>
                {riskTier}
              </span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Priority Score</span>
              <span className="text-sm font-medium">
                {treatment_recommendations.priority_score ? Math.round(treatment_recommendations.priority_score * 100) : 'N/A'}%
              </span>
            </div>
            <div className="text-sm text-gray-600">
              Based on imaging findings and cognitive assessment, the following recommendations are prioritized for optimal patient care.
            </div>
          </div>
        </div>

        {/* Medical Management */}
        <div className="border border-zinc-200 rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Medical Management</h2>
          <div className="space-y-3">
            {treatment_recommendations.medical_management?.map((item: any, i: number) => (
              <div key={i} className="flex items-start space-x-3">
                <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${
                  item.priority === 'high' ? 'bg-red-600' :
                  item.priority === 'moderate' ? 'bg-orange-600' : 'bg-blue-600'
                }`}></div>
                <div className="flex-1">
                  <span className="text-sm text-gray-700 block">{item.intervention}</span>
                  {item.rationale && (
                    <span className="text-xs text-gray-500">{item.rationale}</span>
                  )}
                </div>
              </div>
            )) || <div className="text-sm text-gray-500">No specific medical interventions recommended</div>}
          </div>
        </div>

        {/* Referrals */}
        <div className="border border-zinc-200 rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Referrals</h2>
          <div className="space-y-3">
            {treatment_recommendations.referrals?.map((referral: any, i: number) => (
              <div key={i} className="flex items-start space-x-3">
                <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${
                  referral.priority === 'urgent' ? 'bg-red-600' :
                  referral.priority === 'high' ? 'bg-orange-600' : 'bg-blue-600'
                }`}></div>
                <div className="flex-1">
                  <span className="text-sm text-gray-700 block">{referral.specialist}</span>
                  {referral.rationale && (
                    <span className="text-xs text-gray-500">{referral.rationale}</span>
                  )}
                  {referral.timeframe && (
                    <span className="text-xs text-blue-600 block">Timeline: {referral.timeframe}</span>
                  )}
                </div>
              </div>
            )) || <div className="text-sm text-gray-500">No specialist referrals needed at this time</div>}
          </div>
        </div>
      </div>

      {/* Lifestyle Interventions and Monitoring Schedule - Combined Row */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Lifestyle Interventions */}
        <div className="border border-zinc-200 rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Lifestyle Interventions</h2>
          <div className="space-y-3">
            {treatment_recommendations.lifestyle_interventions?.map((item: any, i: number) => (
              <div key={i} className="flex items-start space-x-3 p-3 bg-green-50 rounded-lg">
                <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${
                  item.priority === 'high' ? 'bg-green-700' : 'bg-green-600'
                }`}></div>
                <div className="flex-1">
                  <span className="text-sm text-gray-700 block">{item.intervention}</span>
                  {item.evidence_level && (
                    <span className="text-xs text-green-600">Evidence: Level {item.evidence_level}</span>
                  )}
                </div>
              </div>
            )) || <div className="text-sm text-gray-500 text-center py-4">No specific lifestyle interventions recommended</div>}
          </div>
        </div>

        {/* Monitoring Schedule */}
        {treatment_recommendations.monitoring_schedule?.length > 0 && (
          <div className="border border-zinc-200 rounded-lg p-6">
            <h2 className="text-lg font-semibold mb-4">Monitoring Schedule</h2>
            <div className="space-y-3">
              {treatment_recommendations.monitoring_schedule.map((item: any, i: number) => (
                <div key={i} className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                  <div className="flex-1">
                    <span className="text-sm font-medium text-gray-700">{item.assessment}</span>
                    <span className="text-xs text-gray-500 block">Priority: {item.priority}</span>
                  </div>
                  <span className="text-sm text-blue-600 font-medium">Every {item.frequency}</span>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Clinical Trials */}
      {highMatchTrials.length > 0 && (
        <div className="border border-zinc-200 rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Clinical Trial Opportunities</h2>
          {trialsLoading ? (
            <div className="text-sm text-gray-500 text-center py-4">Loading...</div>
          ) : (
            <div className="space-y-3">
              {highMatchTrials.map((trial: Trial, i: number) => (
                <div key={i} className="flex items-start space-x-3 p-3 bg-purple-50 rounded-lg">
                  <div className="w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0"></div>
                  <div className="flex-1">
                    <span className="text-sm text-gray-700 block">{trial.title}</span>
                    <span className="text-xs text-gray-500">{trial.summary}</span>
                    <span className="text-xs text-blue-600 block">Status: {trial.status}</span>
                    <span className="text-xs text-blue-600 block">Locations: {trial.locations.join(', ')}</span>
                    <span className="text-xs text-blue-600 block">Match Reason: {trial.match_reason}</span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}
